#![no_main]
#![no_std]

extern crate alloc;

use alloc::vec::Vec;

use lazy_static::lazy_static;
use stylus_sdk::alloy_primitives::U256;
use stylus_sdk::prelude::*;
use substrate_bn::{AffineG1, AffineG2, Fq, Fq2, Fr, Group, Gt, G1, G2};

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

lazy_static! {
    // Scalar field size
    static ref R: U256 = "21888242871839275222246405745257275088548364400416034343698204186575808495617".parse().unwrap();
    // Base field size
    static ref Q: U256 = "21888242871839275222246405745257275088696311157297823662689037894645226208583".parse().unwrap();
    // Alpha
    static ref ALPHA_X: U256 = "<%= vk_alpha_1[0]    %>".parse().unwrap();
    static ref ALPHA_Y: U256 = "<%= vk_alpha_1[1]    %>".parse().unwrap();
    // Beta
    static ref BETA_X_1: U256 = "<%= vk_beta_2[0][1]  %>".parse().unwrap();
    static ref BETA_X_2: U256 = "<%= vk_beta_2[0][0]  %>".parse().unwrap();
    static ref BETA_Y_1: U256 = "<%= vk_beta_2[1][1]  %>".parse().unwrap();
    static ref BETA_Y_2: U256 = "<%= vk_beta_2[1][0]  %>".parse().unwrap();
    // Gamma
    static ref GAMMA_X_1: U256 = "<%= vk_gamma_2[0][1] %>".parse().unwrap();
    static ref GAMMA_X_2: U256 = "<%= vk_gamma_2[0][0] %>".parse().unwrap();
    static ref GAMMA_Y_1: U256 = "<%= vk_gamma_2[1][1] %>".parse().unwrap();
    static ref GAMMA_Y_2: U256 = "<%= vk_gamma_2[1][0] %>".parse().unwrap();
    // Delta
    static ref DELTA_X_1: U256 = "<%= vk_delta_2[0][1] %>".parse().unwrap();
    static ref DELTA_X_2: U256 = "<%= vk_delta_2[0][0] %>".parse().unwrap();
    static ref DELTA_Y_1: U256 = "<%= vk_delta_2[1][1] %>".parse().unwrap();
    static ref DELTA_Y_2: U256 = "<%= vk_delta_2[1][0] %>".parse().unwrap();
    // IC
    static ref IC_X: Vec<U256> = alloc::vec![
        <% for (let i=0; i<IC.length; i++) { %>
            "<%=IC[i][0]%>".parse().unwrap(),
        <% } %>
    ];
    static ref IC_Y: Vec<U256> = alloc::vec![
        <% for (let i=0; i<IC.length; i++) { %>
            "<%=IC[i][1]%>".parse().unwrap(),
        <% } %>
    ];
}

sol_storage! {
    #[entrypoint]
    pub struct StateTransitionVerifier {}
}

#[external]
impl StateTransitionVerifier {
    pub fn verify_proof(
        p_a_1: U256,
        p_a_2: U256,
        p_b_1_1: U256,
        p_b_1_2: U256,
        p_b_2_1: U256,
        p_b_2_2: U256,
        p_c_1: U256,
        p_c_2: U256,  
        signals: [U256; <%=IC.length-1%>],
    ) -> Result<bool, Vec<u8>> {
        verify_proof([p_a_1, p_a_2], [[p_b_1_1, p_b_1_2], [p_b_2_1, p_b_2_2]], [p_c_1, p_c_2], signals)
    }
}

pub fn verify_proof(
    p_a: [U256; 2],
    p_b: [[U256; 2]; 2],
    p_c: [U256; 2],
    signals: [U256; <%=IC.length-1%>],
) -> Result<bool, Vec<u8>> {
    for signal in signals.iter() {
        if *signal > *Q {
            return Ok(false);
        }
    }

    let mut vk = (*IC_X.get(0).unwrap(), *IC_Y.get(0).unwrap());
    for (i, signal) in signals.iter().enumerate() {
        vk = g1_mul_acc_c(
            vk,
            *IC_X.get(i + 1).unwrap(),
            *IC_Y.get(i + 1).unwrap(),
            *signal,
        );
    }

    let mut pairs: Vec<[u8; 192]> = Vec::new();

    let mut first_part = Vec::new();
    // -A
    first_part.extend_from_slice(p_a[0].to_be_bytes_vec().as_slice());
    first_part.extend_from_slice(((*Q - p_a[1]) % *Q).to_be_bytes_vec().as_slice());

    // B
    first_part.extend_from_slice(p_b[0][0].to_be_bytes_vec().as_slice());
    first_part.extend_from_slice(p_b[0][1].to_be_bytes_vec().as_slice());
    first_part.extend_from_slice(p_b[1][0].to_be_bytes_vec().as_slice());
    first_part.extend_from_slice(p_b[1][1].to_be_bytes_vec().as_slice());

    pairs.push(first_part.as_slice().try_into().unwrap());

    let mut second_part = Vec::new();
    // alpha1
    second_part.extend_from_slice((*ALPHA_X).to_be_bytes_vec().as_slice());
    second_part.extend_from_slice((*ALPHA_Y).to_be_bytes_vec().as_slice());

    // beta2
    second_part.extend_from_slice((*BETA_X_1).to_be_bytes_vec().as_slice());
    second_part.extend_from_slice((*BETA_X_2).to_be_bytes_vec().as_slice());
    second_part.extend_from_slice((*BETA_Y_1).to_be_bytes_vec().as_slice());
    second_part.extend_from_slice((*BETA_Y_2).to_be_bytes_vec().as_slice());

    pairs.push(second_part.as_slice().try_into().unwrap());

    let mut third_part = Vec::new();
    // vk
    third_part.extend_from_slice(vk.0.to_be_bytes_vec().as_slice());
    third_part.extend_from_slice(vk.1.to_be_bytes_vec().as_slice());

    // gamma2
    third_part.extend_from_slice((*GAMMA_X_1).to_be_bytes_vec().as_slice());
    third_part.extend_from_slice((*GAMMA_X_2).to_be_bytes_vec().as_slice());
    third_part.extend_from_slice((*GAMMA_Y_1).to_be_bytes_vec().as_slice());
    third_part.extend_from_slice((*GAMMA_Y_2).to_be_bytes_vec().as_slice());

    pairs.push(third_part.as_slice().try_into().unwrap());

    let mut fourth_part = Vec::new();
    // C
    fourth_part.extend_from_slice(p_c[0].to_be_bytes_vec().as_slice());
    fourth_part.extend_from_slice(p_c[1].to_be_bytes_vec().as_slice());

    // delta2
    fourth_part.extend_from_slice((*DELTA_X_1).to_be_bytes_vec().as_slice());
    fourth_part.extend_from_slice((*DELTA_X_2).to_be_bytes_vec().as_slice());
    fourth_part.extend_from_slice((*DELTA_Y_1).to_be_bytes_vec().as_slice());
    fourth_part.extend_from_slice((*DELTA_Y_2).to_be_bytes_vec().as_slice());

    pairs.push(fourth_part.as_slice().try_into().unwrap());

    let pairing = b128_pairing(pairs)?;

    Ok(pairing == U256::from(1))
}


fn g1_mul_acc_c(p_r: (U256, U256), x: U256, y: U256, s: U256) -> (U256, U256) {
    b128_add(b128_mul((x, y), s), p_r)
}

fn b258_point_unchecked(p: (U256, U256)) -> G1 {
    let x = Fq::from_slice(p.0.to_be_bytes_vec().as_slice()).unwrap();
    let y = Fq::from_slice(p.1.to_be_bytes_vec().as_slice()).unwrap();

    AffineG1::new(x, y).map(|v| G1::from(v)).unwrap()
}

fn b128_add(p1: (U256, U256), p2: (U256, U256)) -> (U256, U256) {
    let p1 = b258_point_unchecked(p1);
    let p2 = b258_point_unchecked(p2);

    let sum = AffineG1::from_jacobian(p1 + p2).unwrap();

    let mut x_bytes = [0u8; 32];
    let mut y_bytes = [0u8; 32];
    sum.x().to_big_endian(&mut x_bytes).unwrap();
    sum.y().to_big_endian(&mut y_bytes).unwrap();

    (U256::from_be_bytes(x_bytes), U256::from_be_bytes(y_bytes))
}

fn b128_mul(p: (U256, U256), fr: U256) -> (U256, U256) {
    let p = b258_point_unchecked(p);
    let fr = Fr::from_slice(fr.to_be_bytes_vec().as_slice()).unwrap();

    let product = AffineG1::from_jacobian(p * fr).unwrap();

    let mut x_bytes = [0u8; 32];
    let mut y_bytes = [0u8; 32];
    product.x().to_big_endian(&mut x_bytes).unwrap();
    product.y().to_big_endian(&mut y_bytes).unwrap();

    (U256::from_be_bytes(x_bytes), U256::from_be_bytes(y_bytes))
}

struct PairingContext {}

impl stylus_sdk::call::CallContext for PairingContext {
    fn gas(&self) -> u64 {
        STATIC_CALL_GAS_PRICE
    }
}

fn b128_pairing(pairs: Vec<[u8; 192]>) -> Result<U256, Vec<u8>> {
    let input = pairs.into_iter().flatten().collect::<Vec<u8>>();

    let output = RawCall::new_static()
        .gas(STATIC_CALL_GAS_PRICE)
        .call(address!("0000000000000000000000000000000000000008"), &input)?;

    Ok(U256::from_be_bytes::<32>(output.try_into().unwrap()))
}
